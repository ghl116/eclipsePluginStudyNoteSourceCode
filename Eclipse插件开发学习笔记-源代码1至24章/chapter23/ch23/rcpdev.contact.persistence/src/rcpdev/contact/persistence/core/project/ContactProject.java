package rcpdev.contact.persistence.core.project;

import oracle.toplink.sessions.*;
import oracle.toplink.descriptors.*;
import oracle.toplink.descriptors.invalidation.*;
import oracle.toplink.mappings.*;
import oracle.toplink.mappings.converters.*;
import oracle.toplink.queryframework.*;
import oracle.toplink.expressions.ExpressionBuilder;
import oracle.toplink.history.HistoryPolicy;
import oracle.toplink.sequencing.*;
import rcpdev.contact.persistence.Activator;
import rcpdev.contact.persistence.preferences.PreferenceConstants;

/**
 * This class was generated by the TopLink project class generator.
 * It stores the meta-data (descriptors) that define the TopLink mappings.
 * ## Oracle TopLink - 10g Release 3 (10.1.3.0.0) (Build 060118) ##
 * @see oracle.toplink.tools.workbench.ProjectClassGenerator
 */

public class ContactProject extends oracle.toplink.sessions.Project {

public ContactProject() {
	setName("ContactMgr");
	applyLogin();
	
	addDescriptor(buildAddressDescriptor());
	addDescriptor(buildContactDescriptor());
	addDescriptor(buildCategoryDescriptor());
}

public void applyLogin() {
	DatabaseLogin login = new DatabaseLogin();
	login.usePlatform(new oracle.toplink.platform.database.MySQL4Platform());
	login.setDriverClassName("com.mysql.jdbc.Driver");
	login.setConnectionString(Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_MYSQL_CONSTR));
	login.setUserName(Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_MYSQL_USERNAME));
	login.setPassword(Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_MYSQL_PASSWORD));
	
	// Configuration Properties.
	
	// Sequencing.
	login.setDefaultSequence(new TableSequence("", 50, "sequence", "name", "count"));
	
	setDatasourceLogin(login);
}

public ClassDescriptor buildAddressDescriptor() {
	RelationalDescriptor descriptor = new RelationalDescriptor();
	descriptor.setJavaClass(rcpdev.contact.core.model.contact.Address.class);
	descriptor.addTableName("contact_address");
	descriptor.addPrimaryKeyFieldName("contact_address.address_type");
	descriptor.addPrimaryKeyFieldName("contact_address.contact");
	
	// Descriptor Properties.
	descriptor.useSoftCacheWeakIdentityMap();
	descriptor.setIdentityMapSize(100);
	descriptor.useRemoteSoftCacheWeakIdentityMap();
	descriptor.setRemoteIdentityMapSize(100);
	descriptor.setAlias("Address");
	
	
	// Query Manager.
	descriptor.getQueryManager().checkCacheForDoesExist();
	
	
	// Event Manager.
	
	// Mappings.
	DirectToFieldMapping cityMapping = new DirectToFieldMapping();
	cityMapping.setAttributeName("city");
	cityMapping.setFieldName("contact_address.city");
	descriptor.addMapping(cityMapping);
	
	DirectToFieldMapping countryMapping = new DirectToFieldMapping();
	countryMapping.setAttributeName("country");
	countryMapping.setFieldName("contact_address.country");
	descriptor.addMapping(countryMapping);
	
	DirectToFieldMapping detailMapping = new DirectToFieldMapping();
	detailMapping.setAttributeName("detail");
	detailMapping.setFieldName("contact_address.detail");
	descriptor.addMapping(detailMapping);
	
	DirectToFieldMapping postalCodeMapping = new DirectToFieldMapping();
	postalCodeMapping.setAttributeName("postalCode");
	postalCodeMapping.setFieldName("contact_address.postal_code");
	descriptor.addMapping(postalCodeMapping);
	
	DirectToFieldMapping stateMapping = new DirectToFieldMapping();
	stateMapping.setAttributeName("state");
	stateMapping.setFieldName("contact_address.state");
	descriptor.addMapping(stateMapping);
	
	DirectToFieldMapping typeMapping = new DirectToFieldMapping();
	typeMapping.setAttributeName("type");
	typeMapping.setFieldName("contact_address.address_type");
	descriptor.addMapping(typeMapping);
	
	OneToOneMapping contactMapping = new OneToOneMapping();
	contactMapping.setAttributeName("contact");
	contactMapping.setReferenceClass(rcpdev.contact.core.model.contact.Contact.class);
	contactMapping.dontUseIndirection();
	contactMapping.addForeignKeyFieldName("contact_address.contact", "contact.oid");
	descriptor.addMapping(contactMapping);
	
	return descriptor;
}

public ClassDescriptor buildCategoryDescriptor() {
	RelationalDescriptor descriptor = new RelationalDescriptor();
	descriptor.setJavaClass(rcpdev.contact.core.model.support.Category.class);
	descriptor.addTableName("support_category");
	descriptor.addPrimaryKeyFieldName("support_category.id");
	
	// Descriptor Properties.
	descriptor.useSoftCacheWeakIdentityMap();
	descriptor.setIdentityMapSize(100);
	descriptor.useRemoteSoftCacheWeakIdentityMap();
	descriptor.setRemoteIdentityMapSize(100);
	descriptor.setSequenceNumberFieldName("support_category.id");
	descriptor.setSequenceNumberName("category");
	descriptor.setAlias("Category");
	
	
	// Query Manager.
	descriptor.getQueryManager().checkCacheForDoesExist();
	
	
	// Event Manager.
	
	// Mappings.
	DirectToFieldMapping oidMapping = new DirectToFieldMapping();
	oidMapping.setAttributeName("oid");
	oidMapping.setFieldName("support_category.id");
	descriptor.addMapping(oidMapping);
	
	DirectToFieldMapping valueMapping = new DirectToFieldMapping();
	valueMapping.setAttributeName("value");
	valueMapping.setFieldName("support_category.value");
	descriptor.addMapping(valueMapping);
	
	return descriptor;
}

public ClassDescriptor buildContactDescriptor() {
	RelationalDescriptor descriptor = new RelationalDescriptor();
	descriptor.setJavaClass(rcpdev.contact.core.model.contact.Contact.class);
	descriptor.addTableName("contact");
	descriptor.addPrimaryKeyFieldName("contact.oid");
	
	// Descriptor Properties.
	descriptor.useSoftCacheWeakIdentityMap();
	descriptor.setIdentityMapSize(100);
	descriptor.useRemoteSoftCacheWeakIdentityMap();
	descriptor.setRemoteIdentityMapSize(100);
	descriptor.setSequenceNumberFieldName("contact.oid");
	descriptor.setSequenceNumberName("contact");
	descriptor.setAlias("Contact");
	
	
	// Query Manager.
	descriptor.getQueryManager().checkCacheForDoesExist();
	
	
	// Event Manager.
	
	// Mappings.
	DirectToFieldMapping birthdayMapping = new DirectToFieldMapping();
	birthdayMapping.setAttributeName("birthday");
	birthdayMapping.setFieldName("contact.birthday");
	descriptor.addMapping(birthdayMapping);
	
	DirectToFieldMapping blogMapping = new DirectToFieldMapping();
	blogMapping.setAttributeName("blog");
	blogMapping.setFieldName("contact.blog");
	descriptor.addMapping(blogMapping);
	
	DirectToFieldMapping companyMapping = new DirectToFieldMapping();
	companyMapping.setAttributeName("company");
	companyMapping.setFieldName("contact.company");
	descriptor.addMapping(companyMapping);
	
	DirectToFieldMapping fullNameMapping = new DirectToFieldMapping();
	fullNameMapping.setAttributeName("fullName");
	fullNameMapping.setFieldName("contact.name");
	descriptor.addMapping(fullNameMapping);
	
	DirectToFieldMapping genderMapping = new DirectToFieldMapping();
	genderMapping.setAttributeName("gender");
	genderMapping.setFieldName("contact.gender");
	descriptor.addMapping(genderMapping);
	
	DirectToFieldMapping imMapping = new DirectToFieldMapping();
	imMapping.setAttributeName("im");
	imMapping.setFieldName("contact.im");
	descriptor.addMapping(imMapping);
	
	DirectToFieldMapping noteMapping = new DirectToFieldMapping();
	noteMapping.setAttributeName("note");
	noteMapping.setFieldName("contact.note");
	descriptor.addMapping(noteMapping);
	
	DirectToFieldMapping oidMapping = new DirectToFieldMapping();
	oidMapping.setAttributeName("oid");
	oidMapping.setFieldName("contact.oid");
	descriptor.addMapping(oidMapping);
	
	DirectToFieldMapping webPageMapping = new DirectToFieldMapping();
	webPageMapping.setAttributeName("webPage");
	webPageMapping.setFieldName("contact.webpage");
	descriptor.addMapping(webPageMapping);
	
	DirectMapMapping emailsMapping = new DirectMapMapping();
	emailsMapping.setAttributeName("emails");
	emailsMapping.dontUseIndirection();
	emailsMapping.useMapClass(java.util.TreeMap.class);
	emailsMapping.setReferenceTableName("contact_email");
	emailsMapping.setDirectFieldName("contact_email.email_content");
	emailsMapping.addReferenceKeyFieldName("contact_email.contact", "contact.oid");
	emailsMapping.setDirectKeyFieldName("contact_email.email_type");
	descriptor.addMapping(emailsMapping);
	
	DirectMapMapping phonesMapping = new DirectMapMapping();
	phonesMapping.setAttributeName("phones");
	phonesMapping.dontUseIndirection();
	phonesMapping.useMapClass(java.util.TreeMap.class);
	phonesMapping.setReferenceTableName("contact_phone");
	phonesMapping.setDirectFieldName("contact_phone.phone_content");
	phonesMapping.addReferenceKeyFieldName("contact_phone.contact", "contact.oid");
	phonesMapping.setDirectKeyFieldName("contact_phone.phone_type");
	descriptor.addMapping(phonesMapping);
	
	OneToManyMapping addressesMapping = new OneToManyMapping();
	addressesMapping.setAttributeName("addresses");
	addressesMapping.setReferenceClass(rcpdev.contact.core.model.contact.Address.class);
	addressesMapping.dontUseIndirection();
	addressesMapping.privateOwnedRelationship();
	addressesMapping.useMapClass(java.util.TreeMap.class, "getType");
	addressesMapping.addTargetForeignKeyFieldName("contact_address.contact", "contact.oid");
	descriptor.addMapping(addressesMapping);
	
	return descriptor;
}

}
